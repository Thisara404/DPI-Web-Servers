{
  "info": {
    "name": "SLUDI Authentication API Testing",
    "description": "Complete testing collection for SLUDI Identity & Authentication Server endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "citizenId",
      "value": "",
      "type": "string"
    },
    {
      "key": "authCode",
      "value": "",
      "type": "string"
    },
    {
      "key": "oauthToken",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": ["{{baseUrl}}"],
          "path": ["health"]
        }
      },
      "response": []
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register Citizen",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', responseJson.data.tokens.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', responseJson.data.tokens.refreshToken);",
                  "    pm.collectionVariables.set('citizenId', responseJson.data.citizen.citizenId);",
                  "    pm.test('Registration successful', function () {",
                  "        pm.expect(responseJson.success).to.be.true;",
                  "        pm.expect(responseJson.data.citizen).to.have.property('citizenId');",
                  "        pm.expect(responseJson.data.tokens).to.have.property('accessToken');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe.{{$randomInt}}@test.com\",\n  \"phoneNumber\": \"+94{{$randomInt}}\",\n  \"password\": \"password123\",\n  \"dateOfBirth\": \"1990-01-01\",\n  \"address\": {\n    \"street\": \"123 Main Street\",\n    \"city\": \"Colombo\",\n    \"state\": \"Western\",\n    \"zipCode\": \"00100\",\n    \"country\": \"Sri Lanka\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "response": []
        },
        {
          "name": "Login Citizen",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', responseJson.data.tokens.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', responseJson.data.tokens.refreshToken);",
                  "    pm.collectionVariables.set('citizenId', responseJson.data.citizen.citizenId);",
                  "    pm.test('Login successful', function () {",
                  "        pm.expect(responseJson.success).to.be.true;",
                  "        pm.expect(responseJson.data.tokens).to.have.property('accessToken');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@test.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', responseJson.data.accessToken);",
                  "    pm.test('Token refresh successful', function () {",
                  "        pm.expect(responseJson.success).to.be.true;",
                  "        pm.expect(responseJson.data).to.have.property('accessToken');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/refresh-token",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "refresh-token"]
            }
          },
          "response": []
        },
        {
          "name": "Get Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Profile retrieved successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('citizenId');",
                  "    pm.expect(responseJson.data).to.have.property('email');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "profile"]
            }
          },
          "response": []
        },
        {
          "name": "Update Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Profile updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.firstName).to.eql('John Updated');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John Updated\",\n  \"phoneNumber\": \"+94771234567\",\n  \"address\": {\n    \"street\": \"456 Updated Street\",\n    \"city\": \"Kandy\",\n    \"state\": \"Central\",\n    \"zipCode\": \"20000\",\n    \"country\": \"Sri Lanka\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "profile"]
            }
          },
          "response": []
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "logout"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "OAuth Flow",
      "item": [
        {
          "name": "OAuth Authorize",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Extract authorization code from redirect URL",
                  "if (pm.response.code === 302) {",
                  "    const location = pm.response.headers.get('Location');",
                  "    if (location) {",
                  "        const url = new URL(location);",
                  "        const code = url.searchParams.get('code');",
                  "        if (code) {",
                  "            pm.collectionVariables.set('authCode', code);",
                  "        }",
                  "    }",
                  "    pm.test('OAuth authorization redirect', function () {",
                  "        pm.expect(pm.response.code).to.be.oneOf([302, 200]);",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/oauth/authorize?client_id=test_client&redirect_uri=http://localhost:3000/callback&response_type=code&scope=basic profile&state=xyz123",
              "host": ["{{baseUrl}}"],
              "path": ["api", "oauth", "authorize"],
              "query": [
                {
                  "key": "client_id",
                  "value": "test_client"
                },
                {
                  "key": "redirect_uri",
                  "value": "http://localhost:3000/callback"
                },
                {
                  "key": "response_type",
                  "value": "code"
                },
                {
                  "key": "scope",
                  "value": "basic profile"
                },
                {
                  "key": "state",
                  "value": "xyz123"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "OAuth Token Exchange",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.collectionVariables.set('oauthToken', responseJson.access_token);",
                  "    pm.test('OAuth token exchange successful', function () {",
                  "        pm.expect(responseJson).to.have.property('access_token');",
                  "        pm.expect(responseJson.token_type).to.eql('Bearer');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"grant_type\": \"authorization_code\",\n  \"code\": \"{{authCode}}\",\n  \"client_id\": \"test_client\",\n  \"client_secret\": \"test_secret\",\n  \"redirect_uri\": \"http://localhost:3000/callback\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/oauth/token",
              "host": ["{{baseUrl}}"],
              "path": ["api", "oauth", "token"]
            }
          },
          "response": []
        },
        {
          "name": "OAuth User Info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('OAuth user info retrieved', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('sub');",
                  "    pm.expect(responseJson).to.have.property('name');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{oauthToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/oauth/userinfo",
              "host": ["{{baseUrl}}"],
              "path": ["api", "oauth", "userinfo"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Error Testing",
      "item": [
        {
          "name": "Register - Invalid Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid email rejected', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Invalid\",\n  \"lastName\": \"User\",\n  \"email\": \"invalid-email\",\n  \"phoneNumber\": \"+94771234567\",\n  \"password\": \"password123\",\n  \"dateOfBirth\": \"1990-01-01\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "response": []
        },
        {
          "name": "Login - Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid credentials rejected', function () {",
                  "    pm.expect(pm.response.code).to.eql(401);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"nonexistent@test.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Access Protected Route - No Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Unauthorized access rejected', function () {",
                  "    pm.expect(pm.response.code).to.eql(401);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "profile"]
            }
          },
          "response": []
        },
        {
          "name": "Access Protected Route - Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid token rejected', function () {",
                  "    pm.expect(pm.response.code).to.eql(401);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid_token_here"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "profile"]
            }
          },
          "response": []
        },
        {
          "name": "OAuth - Invalid Grant Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid grant type rejected', function () {",
                  "    pm.expect(pm.response.code).to.eql(400);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"grant_type\": \"invalid_grant\",\n  \"code\": \"invalid_code\",\n  \"client_id\": \"test_client\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/oauth/token",
              "host": ["{{baseUrl}}"],
              "path": ["api", "oauth", "token"]
            }
          },
          "response": []
        }
      ]
    }
  ]
}
